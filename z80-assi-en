#!bin/bash
_LAN="en"
_VERSION="0.1"
_DEVELOPED="WiZZteXX"

_OK="OK"
_ERROR="ERROR"
_WARNING="WARNING"
_DONE="Done"
_ERREXIT="Stopping program"
_CANCELLING="Cancelling"
_COPYING="Copying"
_CLEANINGUP="Cleaning up"
_CREATING="Creating"
_DOWNLOADING="Downloading"
_DELETING="Deleting"
_INSTALLING="Installing"
_ZEROING="Zeroing"
_SEARCHINGFOR="Searching for"
_ASSEMBLING="Assembling"
_ASSEMBLES="Assembles"
_PROGRAMMING="Programming"
_EMULATING="Emulating"
_NOTFOUND="not found"
_FOUND="found"
_FAILED="failed"
_BY="by"
_TO="to"
_CHIP="Chip"
_CHIPS="chips"
_CHIPSFOUND="${_CHIPS} ${_FOUND}"
_NCHIPSFOUND="No ${_CHIPSFOUND}"
_NOCHIP="${_CHIP} not specified"
_BYTES="Bytes"
_DATABASE="database"
_FILE="file"
_OUTPUT="Output"
_FILENAME="Filename"
_IMG="Image"
_SRCFILE="Source ${_FILE}"
_ASSFILE="Binary ${_FILE}"
_LABELFILE="Label ${_FILE}"
_LISTFILE="List ${_FILE}"
_IMGFILE="${_IMG} ${_FILE}"
_EMUFILE="Emulation ${_FILE}"
_FILLCHAR="Fill"
_CODE="Code"
_LIST="list"
_OFFSET="Offset"
_SIZE="Size"
_IMAGESIZE="Image size"
_MEMUSED="Memory used"
_MEMFULL="Memory full!"
_CONFIRM="Continue (Enter) or Cancel (Ctrl+C)"
_COULDNTAUTODETECT="Could not auto-detect the chip size."
_MCHIPSFOUND="Try a more specific search key"
_CHIPSPROMPT="Research (Enter), Cancel (Ctrl+C) or select chip"
_CHIPNAME="Name of the chip or a part of it?"
_CHIPSIZEMAN="Type the size manually? ( Enter memory size in bytes (e.g. 2048) or kilobytes (e.g. 64K) or Cancel (Ctrl+C) )"
_SUDORECALLINST="Please recall the install routine with root acess."
_SUDORECALLUNINST="Please recall the uninstall routine with root acess."
_INSTCHECKPROG="Checking for required programs"
_INSTINSTPROG="Downloading required programs to"
_COULDNTINST="Could not install"
_SERVALLRINST="All service programs allready installed"
_FNFDONOEX="File not found or not executable"
_CALL="Call"
_SHOWHELP="to show full help file"
_PROGRAMS="service programs"
_INSTALLATION="Installation"
_INSTALLSUCC="Installation successfull"
_UNINSTALL="Uninstall"
_PROGNINST="program(s) not installed"
_NSRCFILE="No source file specified"
_OPTCS="Options -s and -c supplied"
_OPTLS="Options -s and -l supplied"
_CHANGES="The specified image size will be changed"
_NRECZERO="not recognized"
_COULDNTASS="Could not assemble"

# USAGE / HELP
_USAGE="USAGE"
_HCHIPNAME="${_CHIP} Name"
_UWITHOUT="Without specifying any options, only list, binary and label files will be created in the local directory 'bin'"
_HELP="HELP"
_HOPTIONS="OPTIONS"
_HBASIC="Basic functions"
_Hl="Start interactive chip selection (overwrites -s)"
_Hc="Name of the memory IC (overwrites -s and -l)"
_Hs="Create ROM image with the specified size (like -p, but without programming the device)"
_Hn="Code offset when creating the ROM image (possible with -s, -l and -p)"
_Ho="Output name without file extension (otherwise like the source file's basename)"
_Hd="Specifiy the working directory (standard: 0), relative or absolute directory"
_He="Emulation of the created machine code"
_Hp="Chip programming using MiniPro TL866x series"
_Ha="Switch programming with verification and emulation on (like -epv)"
_HEXTENDED="Extended functions"
_HI="Install this script and the requested service programs (requires root access)\n\t\t\tAfterwards, it can be called globally with \"z80-assi\""
_HO="Open the working directory when done"
_Hy="Try to program the IC on a wrong ID and verify afterwards"
_Hv="Verify the programmed code"
_Hh="Show this help and quit"
_Hu="Remove this script and the requested service programs (requires root access)"
_HYNOPSE="SYNOPSE"
_HS1="${_ASSEMBLES} /home/[username]/Code.asm ${_TO} /home/[username]/bin/Code.bin. Listing and label file are created in the same directory."
_HS2="${_ASSEMBLES} Code.z80 ${_TO} bin/Code.bin, calls the interactive chip selection and programs the selected device."
_HS3="${_ASSEMBLES} /home/[username]/Code.asm ${_TO} /home/[username]/bin/test.bin, emulates the code and programs and verifies it."
_HS4="${_ASSEMBLES} Code.asm and programs it into an EPROM M27256, even with wrong ID. On finish, the code will be verified."
_HS5="${_ASSEMBLES} Code.asm and creates an ROM image of 65536 (0xFFFF) Bytes.\nThe machine code starts at adress 0x8000. the rest is filled with 0xFF."
_HBYTESORKB="${_BYTES} or KB"
_HOUTPUTFILE="Output ${_FILE}"
_HTARGETDIR="Target Directory"






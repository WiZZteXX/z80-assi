#!bin/bash
_LIN="de"

_OK="OK"
_ERROR="FEHLER"
_WARNING="WARNUNG"
_DONE="Fertig"
_ERREXIT="Fataler Fehler. Abbruch"
_CANCELLING="Abbruch"
_COPYING="Kopiere"
_CLEANINGUP="Räume auf"
_CREATING="Erstelle"
_DOWNLOADING="Lade herunter"
_DELETING="Lösche"
_INSTALLING="Installiere"
_ZEROING="Nulle"
_SEARCHINGFOR="Suche"
_ASSEMBLING="Assembliere"
_ASSEMBLES="Assembliert"
_PROGRAMMING="Programmiere"
_EMULATING="Emulatiere"
_NOTFOUND="nicht gefunden"
_FOUND="gefunden"
_FAILED="gescheitert"
_CHIP="IC"
_CHIPS="ICs"
_BYTES="Bytes"
_DATABASE="Datenbank"
_FILE="Datei"
_OUTPUT="Ausgabe"
_FILENAME="Dateiname"
_IMG="Speicherabbild"
_SRCFILE="Quell-${_FILE}"
_ASSFILE="Binär-${_FILE}"
_LABELFILE="Label-${_FILE}"
_LISTFILE="List-${_FILE}"
_IMGFILE="${_IMG}"
_EMUFILE="Emulations-${_FILE}"
_FILLCHAR="Offset"
_CODE="Code"
_LIST="Liste"
_OFFSET="Offset"
_SIZE="Größe"
_IMAGESIZE="Größe des Speicherabbilds"
_MEMUSED="Dateigröße"
_MEMFULL="Speicher voll!"
_CONFIRM="Fortsetzen (Eingabetaste) oder Abbrechen (Strg+C)"
_COULDNTAUTODETECT="Die Schaltkreisgröße konnte nicht automatisch ermittelt werden."
_NOCHIP="Schaltkreis nicht angegeben"
_NCHIPSFOUND="Keine Schaltkreise gefunden"
_CHIPSFOUND="Schaltkreise gefunden"
_MCHIPSFOUND="Einen genaueren Suchbegriff verwenden"
_CHIPSPROMPT="Erneut suchen (Eingabetaste), Abbrechen (Strg+C) oder Schaltkreis auswählen"
_CHIPNAME="Name des Schaltkreises oder ein Teil davon?"
_CHIPSIZEMAN="Größe manuell eingeben? ( Eingabe in Bytes (z.B. 2048) oder Kilobytes (z.B. 64K) oder Abbrechen (Strg+C) )"
_SUDORECALLINST="Bitte die Installationsroutine mit root-Rechten aufrufen."
_SUDORECALLUNINST="Bitte die Deinstallationsroutine mit root-Rechten aufrufen."
_INSTCHECKPROG="Prüfe benötigte Programme"
_INSTINSTPROG="Lade benötigte Programme herunter nach"
_COULDNTINST="Konnte nicht installieren: "
_SERVALLRINST="Alle benötigten Programmen waren bereits installiert"
_FNFDONOEX="Datei nicht gefunden oder nicht ausführbar"
_BY="von"
_TO="zu"
_CALL=""
_SHOWHELP="aufrufen, um die ganze Hilfedatei anzuzeigen"
_PROGRAMS="benötigte Programme"
_INSTALLATION="Installation"
_INSTALLSUCC="Installation erfolgreich"
_UNINSTALL="Deinstallation"
_PROGNINST="Programm(e) nicht installiert"
_NSRCFILE="Keine Quell-Datei angegeben"
_OPTCS="Optionen -s und -c angegeben"
_OPTLS="Optionen -s und -l angegeben"
_CHANGES="Die angegebene Speicherabbild-Größe wird angepasst"
_NRECZERO="nicht erkannt"
_COULDNTASS="Konnte nicht assembliert werden"

# USAGE / HELP
_USAGE="USAGE"
_HCHIPNAME="${_CHIP} Name"
_UWITHOUT="Without specifying any options, only list, binary and label files will be created in the local directory 'bin'"
_HELP="HELP"
_HOPTIONS="OPTIONS"
_HBASIC="Basic functions"
_Hl="Start interactive chip selection (overwrites -s)"
_Hc="Name of the memory IC (overwrites -s and -l)"
_Hs="Create ROM image with the specified size (like -p, but without programming the device)"
_Hn="Code offset when creating the ROM image (possible with -s, -l and -p)"
_Ho="Output name without file extension (otherwise like the source file's basename)"
_Hd="Specifiy the working directory (standard: 0), relative or absolute directory"
_He="Emulation of the created machine code"
_Hp="Chip programming using MiniPro TL866x series"
_Ha="Switch programming with verification and emulation on (like -epv)"
_HEXTENDED="Extended functions"
_HI="Install this script and the requested service programs (requires root access)\n\t\t\tAfterwards, it can be called globally with \"z80-assi\""
_HO="Open the working directory when done"
_Hy="Try to program the IC on a wrong ID and verify afterwards"
_Hv="Verify the programmed code"
_Hh="Show this help and quit"
_Hu="Remove this script and the requested service programs (requires root access)"
_HYNOPSE="SYNOPSE"
_HS1="${_ASSEMBLES} /home/[username]/Code.asm ${_TO} /home/[username]/bin/Code.bin. Listing and label file are created in the same directory."
_HS2="${_ASSEMBLES} Code.z80 ${_TO} bin/Code.bin, calls the interactive chip selection and programs the selected device."
_HS3="${_ASSEMBLES} /home/[username]/Code.asm ${_TO} /home/[username]/bin/test.bin, emulates the code and programs and verifies it."
_HS4="${_ASSEMBLES} Code.asm and programs it into an EPROM M27256, even with wrong ID. On finish, the code will be verified."
_HS5="${_ASSEMBLES} Code.asm and creates an ROM image of 65536 (0xFFFF) Bytes.\nThe machine code starts at adress 0x8000. the rest is filled with 0xFF."
_HBYTESORKB="${_BYTES} or KB"
_HOUTPUTFILE="Output ${_FILE}"
_HTARGETDIR="Target Directory"





